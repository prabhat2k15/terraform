[0m[1mdata.aws_iam_policy.load_balancer_policy: Reading...[0m[0m
[0m[1mdata.aws_kms_key.by_key_arn: Reading...[0m[0m
[0m[1mdata.aws_kms_key.by_key_arn: Read complete after 1s [id=44d96ccf-30f1-4c24-b562-ef8857bba599][0m
[0m[1mmodule.eks.module.kms.data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.eks.module.kms.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.eks.module.kms.data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.eks_managed_node_group["spot"].data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["spot"].data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["spot"].data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.data.aws_iam_policy_document.assume_role_policy[0]: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2764486067][0m
[0m[1mmodule.eks.module.eks_managed_node_group["spot"].data.aws_iam_policy_document.assume_role_policy[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["spot"].data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2560088296][0m
[0m[1mmodule.eks.module.kms.data.aws_caller_identity.current: Read complete after 1s [id=647255248014][0m
[0m[1mmodule.eks.module.eks_managed_node_group["spot"].data.aws_caller_identity.current: Read complete after 1s [id=647255248014][0m
[0m[1mmodule.eks.data.aws_caller_identity.current: Read complete after 1s [id=647255248014][0m
[0m[1mmodule.eks.data.aws_iam_session_context.current: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_iam_session_context.current: Read complete after 0s [id=arn:aws:iam::647255248014:user/RDX][0m
[0m[1mdata.aws_iam_policy.load_balancer_policy: Read complete after 6s [id=arn:aws:iam::647255248014:policy/AWSLoadBalancerControllerIAMPolicy][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
 [36m<=[0m read (data resources)[0m

Terraform will perform the following actions:

[1m  # data.aws_iam_policy_document.kubernetes_cluster_autoscaler_assume[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "kubernetes_cluster_autoscaler_assume" {
      [32m+[0m[0m id   = (known after apply)
      [32m+[0m[0m json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions = [
              [32m+[0m[0m "sts:AssumeRoleWithWebIdentity",
            ]
          [32m+[0m[0m effect  = "Allow"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "system:serviceaccount:kube-system:cluster-autoscaler",
                ]
              [32m+[0m[0m variable = (known after apply)
            }

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m (known after apply),
                ]
              [32m+[0m[0m type        = "Federated"
            }
        }
    }

[1m  # aws_iam_policy.cluster_autoscaler[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "cluster_autoscaler" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "non-prod-eks-cluster-cluster-autoscaler-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "autoscaling:SetDesiredCapacity",
                          [32m+[0m[0m "autoscaling:TerminateInstanceInAutoScalingGroup",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "aws:ResourceTag/k8s.io/cluster-autoscaler/non-prod-eks-cluster" = "owned"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "VisualEditor0"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "autoscaling:DescribeAutoScalingInstances",
                          [32m+[0m[0m "autoscaling:DescribeAutoScalingGroups",
                          [32m+[0m[0m "ec2:DescribeLaunchTemplateVersions",
                          [32m+[0m[0m "autoscaling:DescribeTags",
                          [32m+[0m[0m "autoscaling:DescribeLaunchConfigurations",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                      [32m+[0m[0m Sid      = "VisualEditor1"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id   = (known after apply)
      [32m+[0m[0m tags_all    = (known after apply)
    }

[1m  # aws_iam_role.kubernetes_cluster_autoscaler[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "kubernetes_cluster_autoscaler" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = (known after apply)
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "non-prod-eks-cluster-cluster-autoscaler"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m role_last_used        = (known after apply)
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # aws_iam_role_policy_attachment.eks_ca_iam_policy_attach[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "eks_ca_iam_policy_attach" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "non-prod-eks-cluster-cluster-autoscaler"
    }

[1m  # aws_iam_role_policy_attachment.eks_lb_iam_policy_attach[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "eks_lb_iam_policy_attach" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::647255248014:policy/AWSLoadBalancerControllerIAMPolicy"
      [32m+[0m[0m role       = "non-prod-eks-cluster-cluster-autoscaler"
    }

[1m  # aws_lb.test[0m will be created
[0m  [32m+[0m[0m resource "aws_lb" "test" {
      [32m+[0m[0m arn                                         = (known after apply)
      [32m+[0m[0m arn_suffix                                  = (known after apply)
      [32m+[0m[0m desync_mitigation_mode                      = "defensive"
      [32m+[0m[0m dns_name                                    = (known after apply)
      [32m+[0m[0m drop_invalid_header_fields                  = false
      [32m+[0m[0m enable_deletion_protection                  = true
      [32m+[0m[0m enable_http2                                = true
      [32m+[0m[0m enable_tls_version_and_cipher_suite_headers = false
      [32m+[0m[0m enable_waf_fail_open                        = false
      [32m+[0m[0m enable_xff_client_port                      = false
      [32m+[0m[0m id                                          = (known after apply)
      [32m+[0m[0m idle_timeout                                = 60
      [32m+[0m[0m internal                                    = false
      [32m+[0m[0m ip_address_type                             = (known after apply)
      [32m+[0m[0m load_balancer_type                          = "application"
      [32m+[0m[0m name                                        = "non-prod-alb"
      [32m+[0m[0m preserve_host_header                        = false
      [32m+[0m[0m security_groups                             = (known after apply)
      [32m+[0m[0m subnets                                     = [
          [32m+[0m[0m "subnet-0b525000c5999fa77",
          [32m+[0m[0m "subnet-0d9b056e2a5aba7a9",
          [32m+[0m[0m "subnet-0facc73f8003813e6",
        ]
      [32m+[0m[0m tags                                        = {
          [32m+[0m[0m "Environment" = "non-prod"
        }
      [32m+[0m[0m tags_all                                    = {
          [32m+[0m[0m "Environment" = "non-prod"
        }
      [32m+[0m[0m vpc_id                                      = (known after apply)
      [32m+[0m[0m xff_header_processing_mode                  = "append"
      [32m+[0m[0m zone_id                                     = (known after apply)
    }

[1m  # aws_lb_listener.lb_listener_http[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_listener" "lb_listener_http" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m load_balancer_arn = (known after apply)
      [32m+[0m[0m port              = 80
      [32m+[0m[0m protocol          = "HTTP"
      [32m+[0m[0m ssl_policy        = (known after apply)
      [32m+[0m[0m tags_all          = (known after apply)

      [32m+[0m[0m default_action {
          [32m+[0m[0m order            = (known after apply)
          [32m+[0m[0m target_group_arn = (known after apply)
          [32m+[0m[0m type             = "forward"
        }
    }

[1m  # aws_lb_target_group.tg[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_target_group" "tg" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m arn_suffix                         = (known after apply)
      [32m+[0m[0m connection_termination             = false
      [32m+[0m[0m deregistration_delay               = "300"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m ip_address_type                    = (known after apply)
      [32m+[0m[0m lambda_multi_value_headers_enabled = false
      [32m+[0m[0m load_balancing_algorithm_type      = (known after apply)
      [32m+[0m[0m load_balancing_cross_zone_enabled  = (known after apply)
      [32m+[0m[0m name                               = "non-prod-lb-tg"
      [32m+[0m[0m port                               = 31410
      [32m+[0m[0m preserve_client_ip                 = (known after apply)
      [32m+[0m[0m protocol                           = "HTTP"
      [32m+[0m[0m protocol_version                   = (known after apply)
      [32m+[0m[0m proxy_protocol_v2                  = false
      [32m+[0m[0m slow_start                         = 0
      [32m+[0m[0m tags_all                           = (known after apply)
      [32m+[0m[0m target_type                        = "instance"
      [32m+[0m[0m vpc_id                             = "vpc-0c2c064da8e38be35"
    }

[1m  # aws_security_group.alb-sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "alb-sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 443
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 443
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 80
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 80
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment" = "non-prod"
          [32m+[0m[0m "ManagedBy"   = "terrafom"
          [32m+[0m[0m "Name"        = "non-prod-alb-sg"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment" = "non-prod"
          [32m+[0m[0m "ManagedBy"   = "terrafom"
          [32m+[0m[0m "Name"        = "non-prod-alb-sg"
        }
      [32m+[0m[0m vpc_id                 = "vpc-0c2c064da8e38be35"
    }

[1m  # helm_release.aws_load_balancer_controller[0m will be created
[0m  [32m+[0m[0m resource "helm_release" "aws_load_balancer_controller" {
      [32m+[0m[0m atomic                     = false
      [32m+[0m[0m chart                      = "eks/aws-load-balancer-controller"
      [32m+[0m[0m cleanup_on_fail            = false
      [32m+[0m[0m create_namespace           = false
      [32m+[0m[0m dependency_update          = false
      [32m+[0m[0m disable_crd_hooks          = false
      [32m+[0m[0m disable_openapi_validation = false
      [32m+[0m[0m disable_webhooks           = false
      [32m+[0m[0m force_update               = false
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m lint                       = false
      [32m+[0m[0m manifest                   = (known after apply)
      [32m+[0m[0m max_history                = 0
      [32m+[0m[0m metadata                   = (known after apply)
      [32m+[0m[0m name                       = "aws-load-balancer-controller"
      [32m+[0m[0m namespace                  = "kube-system"
      [32m+[0m[0m pass_credentials           = false
      [32m+[0m[0m recreate_pods              = false
      [32m+[0m[0m render_subchart_notes      = true
      [32m+[0m[0m replace                    = false
      [32m+[0m[0m repository                 = "eks/aws-load-balancer-controller"
      [32m+[0m[0m reset_values               = false
      [32m+[0m[0m reuse_values               = false
      [32m+[0m[0m skip_crds                  = false
      [32m+[0m[0m status                     = "deployed"
      [32m+[0m[0m timeout                    = 300
      [32m+[0m[0m verify                     = false
      [32m+[0m[0m version                    = "1.4.7"
      [32m+[0m[0m wait                       = true
      [32m+[0m[0m wait_for_jobs              = false

      [32m+[0m[0m set {
          [32m+[0m[0m name  = "clusterName"
          [32m+[0m[0m value = "non-prod-eks-cluster"
        }
      [32m+[0m[0m set {
          [32m+[0m[0m name  = "image.repository"
          [32m+[0m[0m value = "602401143452.dkr.ecr.ap-southeast-1.amazonaws.com/amazon/aws-load-balancer-controller"
        }
      [32m+[0m[0m set {
          [32m+[0m[0m name  = "serviceAccount.create"
          [32m+[0m[0m value = "true"
        }
      [32m+[0m[0m set {
          [32m+[0m[0m name  = "serviceAccount.name"
          [32m+[0m[0m value = "aws-load-balancer-controller"
        }
    }

[1m  # helm_release.nginx_ingress[0m will be created
[0m  [32m+[0m[0m resource "helm_release" "nginx_ingress" {
      [32m+[0m[0m atomic                     = false
      [32m+[0m[0m chart                      = "ingress-nginx"
      [32m+[0m[0m cleanup_on_fail            = false
      [32m+[0m[0m create_namespace           = true
      [32m+[0m[0m dependency_update          = false
      [32m+[0m[0m disable_crd_hooks          = false
      [32m+[0m[0m disable_openapi_validation = false
      [32m+[0m[0m disable_webhooks           = false
      [32m+[0m[0m force_update               = false
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m lint                       = false
      [32m+[0m[0m manifest                   = (known after apply)
      [32m+[0m[0m max_history                = 0
      [32m+[0m[0m metadata                   = (known after apply)
      [32m+[0m[0m name                       = "nginx-ingress-external"
      [32m+[0m[0m namespace                  = "nginx-ingress-external"
      [32m+[0m[0m pass_credentials           = false
      [32m+[0m[0m recreate_pods              = false
      [32m+[0m[0m render_subchart_notes      = true
      [32m+[0m[0m replace                    = false
      [32m+[0m[0m repository                 = "https://kubernetes.github.io/ingress-nginx"
      [32m+[0m[0m reset_values               = false
      [32m+[0m[0m reuse_values               = false
      [32m+[0m[0m skip_crds                  = false
      [32m+[0m[0m status                     = "deployed"
      [32m+[0m[0m timeout                    = 300
      [32m+[0m[0m verify                     = false
      [32m+[0m[0m version                    = "4.6.1"
      [32m+[0m[0m wait                       = true
      [32m+[0m[0m wait_for_jobs              = false

      [32m+[0m[0m set {
          [32m+[0m[0m name  = "controller.ingressClass"
          [32m+[0m[0m value = "nginx-ingress-external"
        }
      [32m+[0m[0m set {
          [32m+[0m[0m name  = "controller.ingressClassByName"
          [32m+[0m[0m value = "true"
        }
      [32m+[0m[0m set {
          [32m+[0m[0m name  = "controller.ingressClassResource.controllerValue"
          [32m+[0m[0m value = "k8s.io/ingress-nginx"
        }
      [32m+[0m[0m set {
          [32m+[0m[0m name  = "controller.ingressClassResource.enabled"
          [32m+[0m[0m value = "true"
        }
      [32m+[0m[0m set {
          [32m+[0m[0m name  = "controller.ingressClassResource.name"
          [32m+[0m[0m value = "nginx-ingress-external"
        }
      [32m+[0m[0m set {
          [32m+[0m[0m name  = "controller.metrics.service.servicePort"
          [32m+[0m[0m value = "80"
        }
      [32m+[0m[0m set {
          [32m+[0m[0m name  = "controller.service.nodePorts.http"
          [32m+[0m[0m value = "31410"
        }
      [32m+[0m[0m set {
          [32m+[0m[0m name  = "controller.service.nodePorts.https"
          [32m+[0m[0m value = "32012"
        }
      [32m+[0m[0m set {
          [32m+[0m[0m name  = "controller.service.type"
          [32m+[0m[0m value = "NodePort"
        }
    }

[1m  # null_resource.kubectl[0m will be created
[0m  [32m+[0m[0m resource "null_resource" "kubectl" {
      [32m+[0m[0m id = (known after apply)
    }

[1m  # null_resource.script[0m will be created
[0m  [32m+[0m[0m resource "null_resource" "script" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m triggers = {}
    }

[1m  # module.eks.data.tls_certificate.this[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "tls_certificate" "this" {
      [32m+[0m[0m certificates = (known after apply)
      [32m+[0m[0m id           = (known after apply)
      [32m+[0m[0m url          = (known after apply)
    }

[1m  # module.eks.aws_cloudwatch_log_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m name              = "/aws/eks/non-prod-eks-cluster/cluster"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 90
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Env"                                  = "non-prod"
          [32m+[0m[0m "Name"                                 = "/aws/eks/non-prod-eks-cluster/cluster"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"    = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/my-cluster" = "owned"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Env"                                  = "non-prod"
          [32m+[0m[0m "Name"                                 = "/aws/eks/non-prod-eks-cluster/cluster"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"    = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/my-cluster" = "owned"
        }
    }

[1m  # module.eks.aws_ec2_tag.cluster_primary_security_group["Env"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "Env"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "non-prod"
    }

[1m  # module.eks.aws_ec2_tag.cluster_primary_security_group["k8s.io/cluster-autoscaler/enabled"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "k8s.io/cluster-autoscaler/enabled"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "true"
    }

[1m  # module.eks.aws_ec2_tag.cluster_primary_security_group["k8s.io/cluster-autoscaler/my-cluster"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "k8s.io/cluster-autoscaler/my-cluster"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "owned"
    }

[1m  # module.eks.aws_eks_cluster.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_cluster" "this" {
      [32m+[0m[0m arn                       = (known after apply)
      [32m+[0m[0m certificate_authority     = (known after apply)
      [32m+[0m[0m cluster_id                = (known after apply)
      [32m+[0m[0m created_at                = (known after apply)
      [32m+[0m[0m enabled_cluster_log_types = [
          [32m+[0m[0m "api",
          [32m+[0m[0m "audit",
          [32m+[0m[0m "authenticator",
        ]
      [32m+[0m[0m endpoint                  = (known after apply)
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m identity                  = (known after apply)
      [32m+[0m[0m name                      = "non-prod-eks-cluster"
      [32m+[0m[0m platform_version          = (known after apply)
      [32m+[0m[0m role_arn                  = (known after apply)
      [32m+[0m[0m status                    = (known after apply)
      [32m+[0m[0m tags                      = {
          [32m+[0m[0m "Env"                                  = "non-prod"
          [32m+[0m[0m "Name"                                 = "non-prod-eks-cluster"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"    = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/my-cluster" = "owned"
        }
      [32m+[0m[0m tags_all                  = {
          [32m+[0m[0m "Env"                                  = "non-prod"
          [32m+[0m[0m "Name"                                 = "non-prod-eks-cluster"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"    = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/my-cluster" = "owned"
        }
      [32m+[0m[0m version                   = "1.25"

      [32m+[0m[0m encryption_config {
          [32m+[0m[0m resources = [
              [32m+[0m[0m "secrets",
            ]

          [32m+[0m[0m provider {
              [32m+[0m[0m key_arn = "arn:aws:kms:us-east-1:647255248014:key/44d96ccf-30f1-4c24-b562-ef8857bba599"
            }
        }

      [32m+[0m[0m kubernetes_network_config {
          [32m+[0m[0m ip_family         = (known after apply)
          [32m+[0m[0m service_ipv4_cidr = (known after apply)
          [32m+[0m[0m service_ipv6_cidr = (known after apply)
        }

      [32m+[0m[0m timeouts {}

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m cluster_security_group_id = (known after apply)
          [32m+[0m[0m endpoint_private_access   = true
          [32m+[0m[0m endpoint_public_access    = false
          [32m+[0m[0m public_access_cidrs       = [
              [32m+[0m[0m "0.0.0.0/0",
            ]
          [32m+[0m[0m security_group_ids        = (known after apply)
          [32m+[0m[0m subnet_ids                = [
              [32m+[0m[0m "subnet-0b525000c5999fa77",
              [32m+[0m[0m "subnet-0d9b056e2a5aba7a9",
              [32m+[0m[0m "subnet-0facc73f8003813e6",
            ]
          [32m+[0m[0m vpc_id                    = (known after apply)
        }
    }

[1m  # module.eks.aws_iam_openid_connect_provider.oidc_provider[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_openid_connect_provider" "oidc_provider" {
      [32m+[0m[0m arn             = (known after apply)
      [32m+[0m[0m client_id_list  = [
          [32m+[0m[0m "sts.amazonaws.com",
        ]
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m tags            = {
          [32m+[0m[0m "Env"                                  = "non-prod"
          [32m+[0m[0m "Name"                                 = "non-prod-eks-cluster"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"    = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/my-cluster" = "owned"
        }
      [32m+[0m[0m tags_all        = {
          [32m+[0m[0m "Env"                                  = "non-prod"
          [32m+[0m[0m "Name"                                 = "non-prod-eks-cluster"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"    = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/my-cluster" = "owned"
        }
      [32m+[0m[0m thumbprint_list = (known after apply)
      [32m+[0m[0m url             = (known after apply)
    }

[1m  # module.eks.aws_iam_policy.cluster_encryption[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "cluster_encryption" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m description = "Cluster encryption policy to allow cluster role to utilize CMK provided"
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = (known after apply)
      [32m+[0m[0m name_prefix = "non-prod-eks-cluster-cluster-ClusterEncryption"
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "kms:Encrypt",
                          [32m+[0m[0m "kms:Decrypt",
                          [32m+[0m[0m "kms:ListGrants",
                          [32m+[0m[0m "kms:DescribeKey",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:kms:us-east-1:647255248014:key/44d96ccf-30f1-4c24-b562-ef8857bba599"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id   = (known after apply)
      [32m+[0m[0m tags        = {
          [32m+[0m[0m "Env"                                  = "non-prod"
          [32m+[0m[0m "Name"                                 = "non-prod-eks-cluster"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"    = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/my-cluster" = "owned"
        }
      [32m+[0m[0m tags_all    = {
          [32m+[0m[0m "Env"                                  = "non-prod"
          [32m+[0m[0m "Name"                                 = "non-prod-eks-cluster"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"    = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/my-cluster" = "owned"
        }
    }

[1m  # module.eks.aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "eks.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "EKSClusterAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = "non-prod-eks-cluster-cluster-"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m role_last_used        = (known after apply)
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Env"                                  = "non-prod"
          [32m+[0m[0m "Name"                                 = "non-prod-eks-cluster"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"    = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/my-cluster" = "owned"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Env"                                  = "non-prod"
          [32m+[0m[0m "Name"                                 = "non-prod-eks-cluster"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"    = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/my-cluster" = "owned"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy {
          [32m+[0m[0m name   = "non-prod-eks-cluster-cluster"
          [32m+[0m[0m policy = jsonencode(
                {
                  [32m+[0m[0m Statement = [
                      [32m+[0m[0m {
                          [32m+[0m[0m Action   = [
                              [32m+[0m[0m "logs:CreateLogGroup",
                            ]
                          [32m+[0m[0m Effect   = "Deny"
                          [32m+[0m[0m Resource = "*"
                        },
                    ]
                  [32m+[0m[0m Version   = "2012-10-17"
                }
            )
        }
    }

[1m  # module.eks.aws_iam_role_policy_attachment.cluster_encryption[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "cluster_encryption" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.aws_iam_role_policy_attachment.this["AmazonEKSClusterPolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.aws_iam_role_policy_attachment.this["AmazonEKSVPCResourceController"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.aws_security_group.cluster[0][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "cluster" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "EKS cluster security group"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "non-prod-eks-cluster-cluster-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Env"                                  = "non-prod"
          [32m+[0m[0m "Name"                                 = "non-prod-eks-cluster-cluster"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"    = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/my-cluster" = "owned"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Env"                                  = "non-prod"
          [32m+[0m[0m "Name"                                 = "non-prod-eks-cluster-cluster"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"    = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/my-cluster" = "owned"
        }
      [32m+[0m[0m vpc_id                 = "vpc-0c2c064da8e38be35"
    }

[1m  # module.eks.aws_security_group.node[0][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "node" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "EKS node shared security group"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "non-prod-eks-cluster-node-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Env"                                        = "non-prod"
          [32m+[0m[0m "Name"                                       = "non-prod-eks-cluster-node"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"          = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/my-cluster"       = "owned"
          [32m+[0m[0m "kubernetes.io/cluster/non-prod-eks-cluster" = "owned"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Env"                                        = "non-prod"
          [32m+[0m[0m "Name"                                       = "non-prod-eks-cluster-node"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"          = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/my-cluster"       = "owned"
          [32m+[0m[0m "kubernetes.io/cluster/non-prod-eks-cluster" = "owned"
        }
      [32m+[0m[0m vpc_id                 = "vpc-0c2c064da8e38be35"
    }

[1m  # module.eks.aws_security_group_rule.cluster["ingress_nodes_443"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "cluster" {
      [32m+[0m[0m description              = "Node groups to cluster API"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["egress_all"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "0.0.0.0/0",
        ]
      [32m+[0m[0m description              = "Allow all egress"
      [32m+[0m[0m from_port                = 0
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "-1"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 0
      [32m+[0m[0m type                     = "egress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_443"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node groups"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_4443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 4443/tcp webhook"
      [32m+[0m[0m from_port                = 4443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 4443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_6443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 6443/tcp webhook"
      [32m+[0m[0m from_port                = 6443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 6443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_8443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 8443/tcp webhook"
      [32m+[0m[0m from_port                = 8443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 8443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_9443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 9443/tcp webhook"
      [32m+[0m[0m from_port                = 9443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 9443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_kubelet"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node kubelets"
      [32m+[0m[0m from_port                = 10250
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 10250
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_nodes_ephemeral"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node ingress on ephemeral ports"
      [32m+[0m[0m from_port                = 1025
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 65535
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_self_coredns_tcp"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node CoreDNS"
      [32m+[0m[0m from_port                = 53
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 53
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_self_coredns_udp"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node CoreDNS UDP"
      [32m+[0m[0m from_port                = 53
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "udp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 53
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.time_sleep.this[0][0m will be created
[0m  [32m+[0m[0m resource "time_sleep" "this" {
      [32m+[0m[0m create_duration = "30s"
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m triggers        = {
          [32m+[0m[0m "cluster_name"    = "non-prod-eks-cluster"
          [32m+[0m[0m "cluster_version" = "1.25"
        }
    }

[1m  # module.eks.module.eks_managed_node_group["spot"].aws_eks_node_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_node_group" "this" {
      [32m+[0m[0m ami_type               = (known after apply)
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m capacity_type          = "SPOT"
      [32m+[0m[0m cluster_name           = "non-prod-eks-cluster"
      [32m+[0m[0m disk_size              = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_types         = [
          [32m+[0m[0m "t3.large",
          [32m+[0m[0m "t3a.large",
          [32m+[0m[0m "m5.large",
        ]
      [32m+[0m[0m labels                 = {
          [32m+[0m[0m "role" = "spot"
        }
      [32m+[0m[0m node_group_name        = (known after apply)
      [32m+[0m[0m node_group_name_prefix = "spot-"
      [32m+[0m[0m node_role_arn          = (known after apply)
      [32m+[0m[0m release_version        = (known after apply)
      [32m+[0m[0m resources              = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m subnet_ids             = [
          [32m+[0m[0m "subnet-0b525000c5999fa77",
          [32m+[0m[0m "subnet-0d9b056e2a5aba7a9",
          [32m+[0m[0m "subnet-0facc73f8003813e6",
        ]
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Env"                                  = "non-prod"
          [32m+[0m[0m "Name"                                 = "spot"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"    = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/my-cluster" = "owned"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Env"                                  = "non-prod"
          [32m+[0m[0m "Name"                                 = "spot"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"    = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/my-cluster" = "owned"
        }
      [32m+[0m[0m version                = "1.25"

      [32m+[0m[0m launch_template {
          [32m+[0m[0m id      = (known after apply)
          [32m+[0m[0m name    = (known after apply)
          [32m+[0m[0m version = (known after apply)
        }

      [32m+[0m[0m scaling_config {
          [32m+[0m[0m desired_size = 1
          [32m+[0m[0m max_size     = 10
          [32m+[0m[0m min_size     = 1
        }

      [32m+[0m[0m timeouts {}

      [32m+[0m[0m update_config {
          [32m+[0m[0m max_unavailable_percentage = 33
        }
    }

[1m  # module.eks.module.eks_managed_node_group["spot"].aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "EKSNodeAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m description           = "EKS managed node group IAM role"
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = "spot-eks-node-group-"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m role_last_used        = (known after apply)
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Env"                                  = "non-prod"
          [32m+[0m[0m "Name"                                 = "non-prod-eks-cluster"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"    = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/my-cluster" = "owned"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Env"                                  = "non-prod"
          [32m+[0m[0m "Name"                                 = "non-prod-eks-cluster"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"    = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/my-cluster" = "owned"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["spot"].aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["spot"].aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["spot"].aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["spot"].aws_launch_template.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_launch_template" "this" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m default_version        = (known after apply)
      [32m+[0m[0m description            = "Custom launch template for spot EKS managed node group"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m latest_version         = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "spot-"
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Env"                                  = "non-prod"
          [32m+[0m[0m "Name"                                 = "non-prod-eks-cluster"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"    = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/my-cluster" = "owned"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Env"                                  = "non-prod"
          [32m+[0m[0m "Name"                                 = "non-prod-eks-cluster"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"    = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/my-cluster" = "owned"
        }
      [32m+[0m[0m update_default_version = true
      [32m+[0m[0m vpc_security_group_ids = (known after apply)

      [32m+[0m[0m metadata_options {
          [32m+[0m[0m http_endpoint               = "enabled"
          [32m+[0m[0m http_protocol_ipv6          = "disabled"
          [32m+[0m[0m http_put_response_hop_limit = 2
          [32m+[0m[0m http_tokens                 = "required"
          [32m+[0m[0m instance_metadata_tags      = "disabled"
        }

      [32m+[0m[0m monitoring {
          [32m+[0m[0m enabled = true
        }

      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "instance"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Env"                                  = "non-prod"
              [32m+[0m[0m "Name"                                 = "spot"
              [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"    = "true"
              [32m+[0m[0m "k8s.io/cluster-autoscaler/my-cluster" = "owned"
            }
        }
      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "network-interface"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Env"                                  = "non-prod"
              [32m+[0m[0m "Name"                                 = "spot"
              [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"    = "true"
              [32m+[0m[0m "k8s.io/cluster-autoscaler/my-cluster" = "owned"
            }
        }
      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "volume"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Env"                                  = "non-prod"
              [32m+[0m[0m "Name"                                 = "spot"
              [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"    = "true"
              [32m+[0m[0m "k8s.io/cluster-autoscaler/my-cluster" = "owned"
            }
        }
    }

[1mPlan:[0m 43 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m alb                                             = (known after apply)
  [32m+[0m[0m cluster-as-role                                 = (known after apply)
  [32m+[0m[0m cluster_arn                                     = (known after apply)
  [32m+[0m[0m cluster_certificate_authority_data              = (known after apply)
  [32m+[0m[0m cluster_endpoint                                = (known after apply)
  [32m+[0m[0m cluster_iam_role_arn                            = (known after apply)
  [32m+[0m[0m cluster_id                                      = (known after apply)
  [32m+[0m[0m cluster_name                                    = "non-prod-eks-cluster"
  [32m+[0m[0m cluster_oidc_issuer_url                         = (known after apply)
  [32m+[0m[0m cluster_security_group_id                       = (known after apply)
  [32m+[0m[0m eks_managed_node_groups_autoscaling_group_names = (known after apply)
  [32m+[0m[0m kmsarn                                          = "44d96ccf-30f1-4c24-b562-ef8857bba599"
  [32m+[0m[0m load_balancer_policy                            = "arn:aws:iam::647255248014:policy/AWSLoadBalancerControllerIAMPolicy"
  [32m+[0m[0m oidc_provider                                   = (known after apply)
  [32m+[0m[0m oidc_provider_arn                               = (known after apply)
  [32m+[0m[0m worker_node                                     = {
      [32m+[0m[0m spot = {
          [32m+[0m[0m autoscaling_group_schedule_arns = {}
          [32m+[0m[0m node_group_labels               = {
              [32m+[0m[0m role = "spot"
            }
          [32m+[0m[0m node_group_taints               = []
        }
    }
[0m[1maws_lb_target_group.tg: Creating...[0m[0m
[0m[1mmodule.eks.aws_cloudwatch_log_group.this[0]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group.node[0]: Creating...[0m[0m
[0m[1maws_security_group.alb-sg: Creating...[0m[0m
[0m[1mmodule.eks.aws_iam_role.this[0]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group.cluster[0]: Creating...[0m[0m
[0m[1mmodule.eks.aws_iam_policy.cluster_encryption[0]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["spot"].aws_iam_role.this[0]: Creating...[0m[0m
[0m[1mmodule.eks.aws_iam_policy.cluster_encryption[0]: Creation complete after 2s [id=arn:aws:iam::647255248014:policy/non-prod-eks-cluster-cluster-ClusterEncryption20230508092850027400000005][0m
[0m[1mmodule.eks.module.eks_managed_node_group["spot"].aws_iam_role.this[0]: Creation complete after 2s [id=spot-eks-node-group-20230508092850030500000006][0m
[0m[1mmodule.eks.module.eks_managed_node_group["spot"].aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["spot"].aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["spot"].aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["spot"].aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"]: Creation complete after 1s [id=spot-eks-node-group-20230508092850030500000006-20230508092852260800000008][0m
[0m[1mmodule.eks.aws_iam_role.this[0]: Creation complete after 3s [id=non-prod-eks-cluster-cluster-20230508092850027100000004][0m
[0m[1mmodule.eks.aws_iam_role_policy_attachment.this["AmazonEKSVPCResourceController"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_iam_role_policy_attachment.this["AmazonEKSClusterPolicy"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_iam_role_policy_attachment.cluster_encryption[0]: Creating...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["spot"].aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"]: Creation complete after 1s [id=spot-eks-node-group-20230508092850030500000006-20230508092852260800000007][0m
[0m[1mmodule.eks.module.eks_managed_node_group["spot"].aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"]: Creation complete after 1s [id=spot-eks-node-group-20230508092850030500000006-20230508092852533100000009][0m
[0m[1mmodule.eks.aws_iam_role_policy_attachment.this["AmazonEKSVPCResourceController"]: Creation complete after 0s [id=non-prod-eks-cluster-cluster-20230508092850027100000004-2023050809285285360000000a][0m
[0m[1mmodule.eks.aws_iam_role_policy_attachment.this["AmazonEKSClusterPolicy"]: Creation complete after 0s [id=non-prod-eks-cluster-cluster-20230508092850027100000004-2023050809285300470000000b][0m
[0m[1mmodule.eks.aws_iam_role_policy_attachment.cluster_encryption[0]: Creation complete after 0s [id=non-prod-eks-cluster-cluster-20230508092850027100000004-2023050809285307340000000c][0m
[0m[1mmodule.eks.aws_cloudwatch_log_group.this[0]: Creation complete after 4s [id=/aws/eks/non-prod-eks-cluster/cluster][0m
[0m[1mmodule.eks.aws_security_group.cluster[0]: Creation complete after 6s [id=sg-0d32539412104f791][0m
[0m[1mmodule.eks.aws_security_group.node[0]: Creation complete after 7s [id=sg-066d50c24ad0c88cd][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_nodes_ephemeral"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_443"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_kubelet"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_4443_webhook"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_6443_webhook"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_9443_webhook"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["egress_all"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.cluster["ingress_nodes_443"]: Creating...[0m[0m
[0m[1maws_security_group.alb-sg: Creation complete after 7s [id=sg-098940f59b5210bb5][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_self_coredns_udp"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_nodes_ephemeral"]: Creation complete after 1s [id=sgrule-464714088][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_8443_webhook"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.cluster["ingress_nodes_443"]: Creation complete after 1s [id=sgrule-2580580248][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_self_coredns_tcp"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_9443_webhook"]: Creation complete after 2s [id=sgrule-2028093711][0m
[0m[1maws_lb.test: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["egress_all"]: Creation complete after 3s [id=sgrule-96248415][0m
[0m[1maws_lb_target_group.tg: Still creating... [10s elapsed][0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_6443_webhook"]: Creation complete after 4s [id=sgrule-253710053][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_4443_webhook"]: Creation complete after 5s [id=sgrule-3327994227][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_443"]: Creation complete after 6s [id=sgrule-1451174505][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_kubelet"]: Creation complete after 7s [id=sgrule-1411368382][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_self_coredns_udp"]: Creation complete after 8s [id=sgrule-2118570897][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_8443_webhook"]: Creation complete after 8s [id=sgrule-474182340][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_self_coredns_tcp"]: Creation complete after 9s [id=sgrule-3659100286][0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Creating...[0m[0m
[0m[1maws_lb_target_group.tg: Creation complete after 19s [id=arn:aws:elasticloadbalancing:us-east-1:647255248014:targetgroup/non-prod-lb-tg/a87ef3fb15fe26d2][0m
[0m[1maws_lb.test: Still creating... [10s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [10s elapsed][0m[0m
[0m[1maws_lb.test: Still creating... [20s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [20s elapsed][0m[0m
[0m[1maws_lb.test: Still creating... [30s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [30s elapsed][0m[0m
[0m[1maws_lb.test: Still creating... [40s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [40s elapsed][0m[0m
[0m[1maws_lb.test: Still creating... [50s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [50s elapsed][0m[0m
[0m[1maws_lb.test: Still creating... [1m0s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [1m0s elapsed][0m[0m
[0m[1maws_lb.test: Still creating... [1m10s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [1m10s elapsed][0m[0m
[0m[1maws_lb.test: Still creating... [1m20s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [1m20s elapsed][0m[0m
[0m[1maws_lb.test: Still creating... [1m30s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [1m30s elapsed][0m[0m
[0m[1maws_lb.test: Still creating... [1m40s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [1m40s elapsed][0m[0m
[0m[1maws_lb.test: Still creating... [1m50s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [1m50s elapsed][0m[0m
[0m[1maws_lb.test: Still creating... [2m0s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [2m0s elapsed][0m[0m
[0m[1maws_lb.test: Still creating... [2m10s elapsed][0m[0m
[0m[1maws_lb.test: Creation complete after 2m11s [id=arn:aws:elasticloadbalancing:us-east-1:647255248014:loadbalancer/app/non-prod-alb/d5c85770fcb91942][0m
[0m[1maws_lb_listener.lb_listener_http: Creating...[0m[0m
[0m[1maws_lb_listener.lb_listener_http: Creation complete after 1s [id=arn:aws:elasticloadbalancing:us-east-1:647255248014:listener/app/non-prod-alb/d5c85770fcb91942/31ec67f8272c2b9f][0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [2m10s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [2m20s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [2m30s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [2m40s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [2m50s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [3m0s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [3m10s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [3m20s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [3m30s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [3m40s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [3m50s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [4m0s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [4m10s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [4m20s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [4m30s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [4m40s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [4m50s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [5m0s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [5m10s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [5m20s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [5m30s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [5m40s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [5m50s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [6m0s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [6m10s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [6m20s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [6m30s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [6m40s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [6m50s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [7m0s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [7m10s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [7m20s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [7m30s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [7m40s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [7m50s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [8m0s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [8m10s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [8m20s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [8m30s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [8m40s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [8m50s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [9m0s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [9m10s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [9m20s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [9m30s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [9m40s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [9m50s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [10m0s elapsed][0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [10m10s elapsed][0m[0m
